#井号表示注释. 
#画出该股票的K线图.
成交量列表 = []
最低价列表 = []
成交量数量取值 = 2
多头最少突破K线数量 = 2
空头最少突破K线数量 = 2
阴阳线数量临界值 = 5
最后一次绘制方向 = 0 # 1 是空 2 是多
上一根K线过去一段时间内K线最高价 = 0
上一根K线过去一段时间内K先最低价 = 99999999
# [1, 2, 3, 4, 5, 6]
# 1 顺势看多 2 顺势看空 3 震荡看多 4 震荡看空 5 突破看多 6 突破看空
需要展示的信号 = [1, 2, 3 ,4]

# 绘制信号函数
def drawing_signal(position, x, txt, color_id):
    最低价 = 取值("最低价", x)
    最高价 = 取值("最高价", x)
    if position == "上":
        text(最高价, x, txt, color_id)
    else:
        text(最低价, x, txt, color_id)

for i in range(0, total):
    上一根K线的收盘价 = 9999999
    上一根K线的最低价 = 9999999
    if i > 0:
        上一根K线的收盘价 = 取值("收盘价", i - 1)
        上一根K线的最低价 = 取值("最低价", i - 1)
    成交量=取值("成交量", i)
    最高价=取值("最高价", i)                            #获取最高价.
    开盘价=取值("开盘价", i)                            #获取开盘价.
    最低价=取值("最低价", i)                            #获取最低价.
    收盘价=取值("收盘价", i)                            #获取收盘价.
    多值.画线存储("K", 最高价, 开盘价, 最低价, 收盘价, i)   #将四个价按顺序储存在"K"对象上.
    成交量列表.append(成交量)
    最低价列表.append(最低价)
    是阳线 = 收盘价 > 开盘价
    是阴线 = 收盘价 < 开盘价
    过去一段时间内最大成交量 = 0
    过去一段时间内最小成交量 = 99999999
    for j in range(成交量数量取值 + 1):
        if j > 0 and i > 成交量数量取值:
            临时成交量 = 取值("成交量", i - j)
            if 临时成交量 > 过去一段时间内最大成交量:
                过去一段时间内最大成交量 = 临时成交量
            if 临时成交量 < 过去一段时间内最小成交量:
                过去一段时间内最小成交量 = 临时成交量
    过去一段时间内K线最高价 = 0
    过去一段时间内K线最低价 = 99999999
    过去一段时间内阳线的数量 = 0
    过去一段时间内阴线的数量 = 0
    # 多头突破计算
    for j in range(多头最少突破K线数量 + 1):
        if j > 0 and i > 多头最少突破K线数量:
            临时最高价 = 取值("最高价", i - j)
            if 临时最高价 >过去一段时间内K线最高价:
                过去一段时间内K线最高价 = 临时最高价
    # 空头突破计算
    for j in range(空头最少突破K线数量 + 1):
        if j > 0 and i > 空头最少突破K线数量:
            临时最低价 = 取值("最低价", i - j)
            if 临时最低价 < 过去一段时间内K线最低价:
                过去一段时间内K线最低价 = 临时最低价
    # 计算阴阳线数量临界值
    for j in range(阴阳线数量临界值 + 1):
        if j > 0 and i > 阴阳线数量临界值:
            临时开盘价 = 取值("开盘价", i - j)
            临时收盘价 = 取值("收盘价", i - j)
            if 临时收盘价 >= 临时开盘价:
                过去一段时间内阳线的数量+=1
            else:
                过去一段时间内阴线的数量+=1
    # 成交量调试
    if 成交量 > 过去一段时间内最大成交量:
       text(最低价 - 6, i, "", 1)

    # 震荡看空策略
    if (
       4 in 需要展示的信号
       and 收盘价 > 过去一段时间内K线最高价
       and 成交量 > 过去一段时间内最大成交量
       ):
       最后一次绘制方向 = 1
       drawing_signal("上", i, "震荡空", 7)

    # 顺势看多策略
    if (
       2 in 需要展示的信号
       and 上一根K线的收盘价 > 上一根K线过去一段时间内K线最高价
       # and 是阴线
       and 过去一段时间内阳线的数量 > 过去一段时间内阴线的数量
       ):
       最后一次绘制方向 = 2
       drawing_signal("下", i, "顺势多", 8)

    # 震荡看多策略
    if (
       3 in 需要展示的信号
       and 收盘价 < 过去一段时间内K线最低价
       and 是阴线 
       and 成交量 > 过去一段时间内最大成交量
       ):
       最后一次绘制方向 = 2
       drawing_signal("下", i, "震荡多", 2)

    # 顺势看空策略
    if (
       2 in 需要展示的信号
       and 上一根K线的收盘价 < 上一根K线过去一段时间内K先最低价
       # and 是阳线
       and 过去一段时间内阴线的数量 > 过去一段时间内阳线的数量
       ):
       最后一次绘制方向 = 1
       drawing_signal("上", i, "顺势空", 5)
   
    # 突破看多策略
    if (
       5 in 需要展示的信号
       and 收盘价 > 过去一段时间内K线最高价
       and 成交量 > 过去一段时间内最大成交量
       and 是阳线
       ):
       最后一次绘制方向 = 2
       drawing_signal("下", i, "突破多", 3)

    # 突破看空策略
    if (
       6 in 需要展示的信号
       and 收盘价 < 过去一段时间内K线最低价
       and 成交量 > 过去一段时间内最大成交量
       and 是阴线
       ):
       最后一次绘制方向 = 1
       drawing_signal("上", i, "突破空", 8)

    上一根K线过去一段时间内K线最高价 = 过去一段时间内K线最高价
    上一根K线过去一段时间内K先最低价 = 过去一段时间内K线最低价
绘制.K线("K")                                       #画出K线.
